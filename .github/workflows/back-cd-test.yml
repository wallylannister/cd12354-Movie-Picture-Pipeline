name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'  # Trigger only when files in the backend directory change
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      - name: Run lint
        run: pipenv run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install
      - name: Run tests
        run: pipenv run test

  build-and-deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install
      - name: Build Docker Image
        run: |
          docker build -t my-backend:latest .
      #    echo "REACT_APP_MOVIE_API_URL=$(docker inspect --format='{{range .Config.Env}}{{println .}}{{end}}' backend | grep REACT_APP_MOVIE_API_URL | cut -d '=' -f2)" >> $GITHUB_ENV

      - name: Tag Docker Image
        run: docker tag my-backend:latest ${{ secrets.ECR_REGISTRY_B }}:${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      - name: Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          echo "${{ github.sha }} ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} ${{ secrets.AWS_REGION }} ${{ secrets.ECR_REGISTRY }}"
          docker push ${{ secrets.ECR_REGISTRY_B }}:${{ github.sha }}

        shell: bash
      - name: Update kubectl
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ secrets.AWS_REGION }}

      - name: Deploy to Kubernetes
        run: |
          cd k8s
          kustomize edit set image backend=${{ secrets.ECR_REGISTRY_B }}:${{ github.sha }}
          kustomize build | kubectl apply -f -
        shell: bash

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2
      