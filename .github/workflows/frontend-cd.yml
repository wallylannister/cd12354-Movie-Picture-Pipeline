name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'  # Trigger only when files in the frontend directory change
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Setup Project
        uses: wallylannister/cd12354-Movie-Picture-Pipeline@main
        with:
          node-version: '18'
      - name: Run Tests
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Setup Project
        uses: wallylannister/cd12354-Movie-Picture-Pipeline@main
        with:
          node-version: '18'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Get Backend Service endpoint
        id: get_be_service_url
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ secrets.AWS_REGION }}
          kubectl get svc -A
          export BACKEND_ENDPOINT=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "movie_api_url=$BACKEND_ENDPOINT" >> $GITHUB_ENV
          
      
      - name: Build Docker Image
        run: docker build --build-arg REACT_APP_MOVIE_API_URL=http://$movie_api_url/ -t my-frontend:latest .
      - name: Tag Docker Image
        run: docker tag my-frontend:latest ${{ secrets.ECR_REGISTRY_F }}:${{ github.sha }}
      - name: Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker push ${{ secrets.ECR_REGISTRY_F }}:${{ github.sha }}
      - name: Deploy to Kubernetes
        run: |
          cd k8s
          kustomize edit set image frontend=${{ secrets.ECR_REGISTRY_F }}:${{ github.sha }}
          kustomize build | kubectl apply -f -

  post-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create Build text file
        run: |  
          aws eks update-kubeconfig --name cluster --region ${{ secrets.AWS_REGION }}
          mkdir -p output
          echo "$(kubectl get svc -A)" > output/build.txt
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: output/

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./starter/frontend/k8s
  #   steps:
      