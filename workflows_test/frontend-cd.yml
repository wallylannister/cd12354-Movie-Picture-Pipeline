name: Frontend Continuous Deployment

# Trigger the workflow on pushes to the main branch and manual dispatch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Setup NodeJS environment
    - name: Setup NodeJS
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    # Cache node modules to speed up the workflow
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Run linting
    - name: Run lint
      run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Setup NodeJS environment
    - name: Setup NodeJS
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    # Cache node modules to speed up the workflow
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Run tests
    - name: Run tests
      run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Setup NodeJS environment
    - name: Setup NodeJS
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    # Cache node modules to speed up the workflow
    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Build the application
    - name: Build application
      run: npm run build

    # Build Docker image with build-args
    - name: Build Docker image
      run: docker build -t ${{ secrets.ECR_REGISTRY_F }}/frontend:${{ github.sha }} --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }} .

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: ${{ secrets.ECR_REGISTRY_F }}

    # Push Docker image to ECR
    - name: Push Docker image to ECR
      run: docker push ${{ secrets.ECR_REGISTRY_F }}/frontend:${{ github.sha }}

    # Deploy to EKS
    # - name: Deploy to EKS
      # uses: actions/aws-eks-deploy@v1
      # with:
      #   cluster-name: ${{ secrets.EKS_CLUSTER_NAME }}
      #   region: ${{ secrets.AWS_REGION }}
      #   service: frontend
      #   image: ${{ secrets.ECR_REGISTRY_F }}/frontend:${{ github.sha }}
    # Deploy job
  deploy:
    runs-on: ubuntu-latest
    needs: build # Ensure build job completes successfully before running deploy
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup kubectl
      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      # Deploy to EKS using kustomize
      - name: Deploy to EKS using kustomize
        run: |
          cd starter/frontend/k8s
          kubectl apply -k .
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      